{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = eachHourOfInterval;\n\nvar _index = _interopRequireDefault(require(\"../addHours/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of hours from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n * var result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\n\n\nfunction eachHourOfInterval(dirtyInterval, options) {\n  (0, _index3.default)(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = (0, _index2.default)(interval.start);\n  var endDate = (0, _index2.default)(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setMinutes(0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push((0, _index2.default)(currentDate));\n    currentDate = (0, _index.default)(currentDate, step);\n  }\n\n  return dates;\n}\n\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","eachHourOfInterval","_index","_interopRequireDefault","require","_index2","_index3","obj","__esModule","dirtyInterval","options","arguments","interval","startDate","start","endDate","end","startTime","getTime","endTime","RangeError","dates","currentDate","setMinutes","step","Number","isNaN","push","module"],"sources":["/Users/rashmishrees/Desktop/prabhu-invoice-project/rashmi-work-done/sdd_using_axios/sddusingaxios/node_modules/date-fns/eachHourOfInterval/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = eachHourOfInterval;\n\nvar _index = _interopRequireDefault(require(\"../addHours/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of hours from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n * var result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\nfunction eachHourOfInterval(dirtyInterval, options) {\n  (0, _index3.default)(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = (0, _index2.default)(interval.start);\n  var endDate = (0, _index2.default)(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setMinutes(0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push((0, _index2.default)(currentDate));\n    currentDate = (0, _index.default)(currentDate, step);\n  }\n\n  return dates;\n}\n\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,kBAAlB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAAnC;;AAEA,IAAIC,OAAO,GAAGF,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAApC;;AAEA,IAAIE,OAAO,GAAGH,sBAAsB,CAACC,OAAO,CAAC,+BAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEP,OAAO,EAAEO;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASN,kBAAT,CAA4BQ,aAA5B,EAA2CC,OAA3C,EAAoD;EAClD,CAAC,GAAGJ,OAAO,CAACN,OAAZ,EAAqB,CAArB,EAAwBW,SAAxB;EACA,IAAIC,QAAQ,GAAGH,aAAa,IAAI,EAAhC;EACA,IAAII,SAAS,GAAG,CAAC,GAAGR,OAAO,CAACL,OAAZ,EAAqBY,QAAQ,CAACE,KAA9B,CAAhB;EACA,IAAIC,OAAO,GAAG,CAAC,GAAGV,OAAO,CAACL,OAAZ,EAAqBY,QAAQ,CAACI,GAA9B,CAAd;EACA,IAAIC,SAAS,GAAGJ,SAAS,CAACK,OAAV,EAAhB;EACA,IAAIC,OAAO,GAAGJ,OAAO,CAACG,OAAR,EAAd,CANkD,CAMjB;;EAEjC,IAAI,EAAED,SAAS,IAAIE,OAAf,CAAJ,EAA6B;IAC3B,MAAM,IAAIC,UAAJ,CAAe,kBAAf,CAAN;EACD;;EAED,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIC,WAAW,GAAGT,SAAlB;EACAS,WAAW,CAACC,UAAZ,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B;EACA,IAAIC,IAAI,GAAGd,OAAO,IAAI,UAAUA,OAArB,GAA+Be,MAAM,CAACf,OAAO,CAACc,IAAT,CAArC,GAAsD,CAAjE;EACA,IAAIA,IAAI,GAAG,CAAP,IAAYE,KAAK,CAACF,IAAD,CAArB,EAA6B,MAAM,IAAIJ,UAAJ,CAAe,gDAAf,CAAN;;EAE7B,OAAOE,WAAW,CAACJ,OAAZ,MAAyBC,OAAhC,EAAyC;IACvCE,KAAK,CAACM,IAAN,CAAW,CAAC,GAAGtB,OAAO,CAACL,OAAZ,EAAqBsB,WAArB,CAAX;IACAA,WAAW,GAAG,CAAC,GAAGpB,MAAM,CAACF,OAAX,EAAoBsB,WAApB,EAAiCE,IAAjC,CAAd;EACD;;EAED,OAAOH,KAAP;AACD;;AAEDO,MAAM,CAAC9B,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}