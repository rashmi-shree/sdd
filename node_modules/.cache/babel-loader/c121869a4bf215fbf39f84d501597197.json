{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatISO9075;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../isValid/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/addLeadingZeros/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\n\n\nfunction formatISO9075(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = (0, _index.default)(dirtyDate);\n\n  if (!(0, _index2.default)(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = (0, _index3.default)(originalDate.getDate(), 2);\n    var month = (0, _index3.default)(originalDate.getMonth() + 1, 2);\n    var year = (0, _index3.default)(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    var hour = (0, _index3.default)(originalDate.getHours(), 2);\n    var minute = (0, _index3.default)(originalDate.getMinutes(), 2);\n    var second = (0, _index3.default)(originalDate.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    var separator = result === '' ? '' : ' '; // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);\n  }\n\n  return result;\n}\n\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","formatISO9075","_index","_interopRequireDefault","require","_index2","_index3","obj","__esModule","dirtyDate","dirtyOptions","arguments","length","TypeError","concat","originalDate","RangeError","options","format","String","representation","result","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","separator","module"],"sources":["/Users/rashmishrees/Desktop/prabhu-invoice-project/rashmi-work-done/sdd_using_axios/sddusingaxios/node_modules/date-fns/formatISO9075/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatISO9075;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../isValid/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/addLeadingZeros/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\nfunction formatISO9075(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = (0, _index.default)(dirtyDate);\n\n  if (!(0, _index2.default)(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = (0, _index3.default)(originalDate.getDate(), 2);\n    var month = (0, _index3.default)(originalDate.getMonth() + 1, 2);\n    var year = (0, _index3.default)(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    var hour = (0, _index3.default)(originalDate.getHours(), 2);\n    var minute = (0, _index3.default)(originalDate.getMinutes(), 2);\n    var second = (0, _index3.default)(originalDate.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    var separator = result === '' ? '' : ' '; // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(hour).concat(timeDelimiter).concat(minute).concat(timeDelimiter).concat(second);\n  }\n\n  return result;\n}\n\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}